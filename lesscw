#!/usr/bin/env node

(function(){
  var fs, exec, FOLDER_SCAN_INTERVAL, cp_exec, get_time, path, less2css, recursive_walk;
  fs = require('fs-dowatch');
  exec = require('child_process').exec;
  FOLDER_SCAN_INTERVAL = 5000;
  cp_exec = function(cmd, name, fn){
    name || (name = 'cmd');
    exec(cmd, function(err, stdout, stderr){
      if (err) {
        console.log(("\x07" + name + ".err: ") + err);
      }
      if (stdout) {
        console.log((name + ".stdout: ") + stdout);
      }
      if (stderr) {
        console.log(("\x07" + name + ".stderr: ") + stderr);
      }
      if (fn != null) {
        return fn.apply(this, arguments);
      }
    });
  };
  get_time = function(){
    var x;
    x = new Date().toISOString();
    x = x.match(/([0-9]+):([0-9]+):([0-9]+)\.([0-9]+)/);
    return x[0];
  };
  if (process.argv.length < 3) {
    console.log("Error: no file/directory parameter.\nUsage:\n - `lesscw asd.less` will output `./asd.css` and it will output `./asd.css` on every change of `asd.less`.\n - `lesscw asd` will compile all `./asd/*.less` into `./asd/*.css` and it will do so on every `./asd/*.less` file change.");
    return false;
  }
  path = process.argv.pop();
  if (!fs.existsSync(path)) {
    console.log("File or directory `" + path + "` doesnt exist");
    return false;
  }
  less2css = function(source_path){
    var target_path;
    target_path = source_path.replace(/\.less$/, '' + '.css');
    return fs.dowatch(source_path, function(){
      var cmd;
      cmd = "lessc " + source_path + " > " + target_path;
      console.log(cmd + ", " + get_time());
      return cp_exec(cmd, 'lesscw');
    });
  };
  recursive_walk = function(path, callback){
    return fs.stat(path, function(err, stats){
      if (err) {
        throw err;
      }
      if (stats.isFile() && path.match(/\.less$/)) {
        return less2css(path);
      } else if (stats.isDirectory()) {
        return fs.readdir(path, function(err, dir){
          if (err) {
            throw err;
          }
          return dir.forEach(function(_path){
            var __path;
            __path = path + "/" + _path;
            return fs.stat(__path, function(err, stats){
              if (err) {
                throw err;
              }
              if (stats.isFile() && _path.match(/\.less$/)) {
                return less2css(__path);
              } else {
                return recursive_walk(__path);
              }
            });
          });
        });
      }
    });
  };
  recursive_walk(path);
  setInterval(function(){
    return recursive_walk(path);
  }, FOLDER_SCAN_INTERVAL);
}).call(this);
