fs   = require 'fs-dowatch'
exec = require 'child_process' .exec

FOLDER_SCAN_INTERVAL = 5000

cp_exec = !(cmd,name || 'cmd',fn)->
	exec cmd, (err,stdout,stderr)->
		console.log "\007#name.err: "+err if err
		console.log "#name.stdout: "+stdout if stdout
		console.log "\007#name.stderr: "+stderr if stderr

		if fn?
			fn ...

# hh:mm:ss.mmm
get_time = ->
	x = new Date().toISOString()
	x = x.match /([0-9]+):([0-9]+):([0-9]+)\.([0-9]+)/
	x[0]

if process.argv.length < 3
	console.log "Error: no file/directory parameter.\nUsage:\n - `lesscw asd.less` will output `./asd.css` and it will output `./asd.css` on every change of `asd.less`.\n - `lesscw asd` will compile all `./asd/*.less` into `./asd/*.css` and it will do so on every `./asd/*.less` file change."
	return false

path = process.argv.pop!

if not fs.existsSync path
	console.log "File or directory `#path` doesnt exist"
	return false

# less2css = {}

less2css = (source_path)->
	target_path = source_path .replace /\.less$/, '' + '.css'
	fs.dowatch source_path, ->
		cmd = "lessc #source_path > #target_path"
		console.log "#cmd, #{get_time()}"
		cp_exec cmd, 'lesscw'

recursive_walk = (path,callback)->
	(err,stats)<- fs.stat path
	throw err if err
	if stats.isFile! and path.match /\.less$/
		less2css path
	else if stats.isDirectory!
		(err,dir)<-fs.readdir path
		throw err if err
		(_path)<-dir.forEach
		__path = "#path/#_path"
		(err,stats)<-fs.stat __path
		throw err if err
		if stats.isFile! and _path.match /\.less$/
			less2css __path
		else
			recursive_walk __path
	
recursive_walk path
setInterval ->
	recursive_walk path
,FOLDER_SCAN_INTERVAL
